{"version":3,"sources":["bg.jpg","rick-roll-rick-ashley.gif","App.js","reportWebVitals.js","index.js"],"names":["App","QA","q","a","n","useState","started","setStarted","finished","setFinished","qIndex","setQIndex","inputValue","setInputValue","tip","setTip","className","style","backgroundImage","bg","backgroundSize","id","onClick","type","placeholder","value","onChange","e","target","onSelect","Number","length","src","rick","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAAe,G,MAAA,IAA0B,gCCA1B,MAA0B,kD,OCwE1BA,MAnEf,WACE,IAAMC,EAAK,CACP,CACIC,EAAG,iKACHC,EAAG,EACHC,EAAG,GAEP,CACIF,EAAG,0EACHC,EAAG,EACHC,EAAG,GAEP,CACIF,EAAG,+FACHC,EAAG,EACHC,EAAG,IAIX,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAsBR,oBAAS,GAA/B,mBAAOS,EAAP,KAAYC,EAAZ,KAeA,OACE,qBAAKC,UAAU,MAAMC,MAAO,CAACC,gBAAgB,OAAD,OAASC,EAAT,KAAgBC,eAAgB,OAA5E,SACI,sBAAKC,GAAG,OAAR,WACMf,GACE,qCACI,sFACA,wBAAQgB,QAAS,kBAAMf,GAAW,IAAlC,sBAGND,IAAYE,GACV,qCACI,6BAAKP,EAAGS,GAAQR,IAChB,uBAAOqB,KAAK,OAAOC,YAAY,iBAAYC,MAAOb,EAAYc,SAAU,SAACC,GAAD,OAAOd,EAAcc,EAAEC,OAAOH,QAAQI,SAAU,kBAAMd,GAAO,MACpID,GAAO,2DACR,wBAAQQ,QA3BL,WAChBQ,OAAOlB,KAAgBX,EAAGS,GAAQP,EAC7BO,EAAS,EAAMT,EAAG8B,OAAS,EAC3BtB,GAAY,IAEZI,EAAc,IACdF,EAAUD,EAAS,IAGvBK,GAAO,IAkBK,4CAGPP,GACG,qCACI,qBAAKwB,IAAKC,EAAMC,IAAK,aACrB,4DACA,8CCpDLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d7ad5b76.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.1129ebf2.jpg\";","export default __webpack_public_path__ + \"static/media/rick-roll-rick-ashley.bb756259.gif\";","import './App.css';\r\nimport bg from \"./bg.jpg\";\r\nimport { useState } from \"react\";\r\nimport rick from './rick-roll-rick-ashley.gif'\r\n\r\nfunction App() {\r\n  const QA = [\r\n      {\r\n          q: 'Numer linii tramwajowej przejeżdżającej w Gdańsku przez: Legionów, Podwale Grodzkie, Podwale Przedmiejskie, Lenartowicza, Nowotną:',\r\n          a: 8,\r\n          n: 8,\r\n      },\r\n      {\r\n          q: 'Częśc GTA znana z misji ze zdalnie sterowanym samochodzikiem:',\r\n          a: 3,\r\n          n: 3,\r\n      },\r\n      {\r\n          q: 'Cyfra dziesiątek największej liczby pierwszej poznanej przed erą elektroniki:',\r\n          a: 2,\r\n          n: 2,\r\n      }\r\n  ]\r\n\r\n  const [started, setStarted] = useState(false)\r\n  const [finished, setFinished] = useState(false)\r\n  const [qIndex, setQIndex] = useState(0)\r\n  const [inputValue, setInputValue] = useState('')\r\n  const [tip, setTip] = useState(false)\r\n\r\n  const handleAnswer = () => {\r\n    if(Number(inputValue) === QA[qIndex].a) {\r\n        if((qIndex + 1) > (QA.length - 1)) {\r\n            setFinished(true)\r\n        } else {\r\n            setInputValue('')\r\n            setQIndex(qIndex + 1)\r\n        }\r\n    } else {\r\n        setTip(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" style={{backgroundImage: `url(${bg})`, backgroundSize: '25%'}}>\r\n        <div id='main'>\r\n            {!started && (\r\n                <>\r\n                    <h2>Odpowiedz na pytania i zgadnij swój kod do sejfu!</h2>\r\n                    <button onClick={() => setStarted(true)}>Start</button>\r\n                </>\r\n            )}\r\n            {(started && !finished) && (\r\n                <>\r\n                    <h2>{QA[qIndex].q}</h2>\r\n                    <input type='text' placeholder=\"Odpowiedź\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} onSelect={() => setTip(false)}/>\r\n                    {tip && <p>Zła odpowiedź :(</p>}\r\n                    <button onClick={handleAnswer}>Sprawdź odpowiedź</button>\r\n                </>\r\n            )}\r\n            {finished && (\r\n                <>\r\n                    <img src={rick} alt={'rickRoll'}/>\r\n                    <h2>Gratki! Pełny kod to:</h2>\r\n                    <h1>832</h1>\r\n                </>\r\n            )}\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}